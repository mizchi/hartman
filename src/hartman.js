// Generated by CoffeeScript 1.7.1
(function() {
  var argv, defaults, ensureTestDir, ext, fs, generate, glob, mkdirp, path, src, test, _;

  glob = require('glob');

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  mkdirp = require('mkdirp');

  argv = require('optimist')["default"]('test', 'test')["default"]('src', 'src')["default"]('ext', '.coffee').argv;

  src = argv.src, test = argv.test, ext = argv.ext;

  defaults = {
    ".coffee": function(input, dest, depth) {
      var depthText, inputExtless;
      depthText = path.join.apply(path, _.times(depth, function(n) {
        return '..';
      }));
      inputExtless = input.replace(".coffee", '');
      return "# require '" + depthText + "/" + inputExtless + "'\ndescribe \"" + inputExtless + "\", ->\n  it \"should be written\"";
    },
    ".js": function(input, dest, depth) {
      var depthText, inputExtless;
      depthText = path.join.apply(path, _.times(depth, function(n) {
        return '..';
      }));
      inputExtless = input.replace(".coffee", '');
      return "// require('" + depthText + "/" + inputExtless + "')\ndescribe(\"" + inputExtless + "\", function(){\n  it(\"should be written\")\n});";
    }
  };

  ensureTestDir = function() {
    if (!fs.existsSync(test)) {
      return mkdirp.sync(test);
    }
  };

  generate = function() {
    return glob("" + src + "/**/*" + ext, function(err, files) {
      return files.map(function(f) {
        var depth, input, output, result;
        input = f;
        output = f.replace(src, test);
        depth = f.match(/\//g).length;
        if (fs.existsSync(output)) {
          return console.log("skip", output);
        } else {
          if (!fs.existsSync(path.dirname(output))) {
            mkdirp.sync(path.dirname(output));
          }
          console.log("create", output);
          result = defaults[ext](input, output, depth);
          return fs.writeFileSync(output, result);
        }
      });
    });
  };

  module.exports = function() {
    ensureTestDir();
    return generate();
  };

}).call(this);
